package com.app3c.application.feed;
import static com.app3c.application.elderly.UserProfile.recommend;
import static java.lang.Boolean.FALSE;
import static java.lang.Boolean.TRUE;
import android.util.Log;
import androidx.annotation.NonNull;
import com.google.firebase.database.ChildEventListener;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseException;
import com.google.firebase.database.DatabaseReference;
import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Date;
import java.util.HashMap;
import java.util.concurrent.TimeUnit;

public class FirebaseHelper {
    DatabaseReference db;
    Boolean saved;
    ArrayList<Event_Post> Posts=new ArrayList<>();
    ArrayList<String>event_ids = new ArrayList<>();
    ArrayList<Event_Post>events_ngo = new ArrayList<>();
    ArrayList<String>events_registered = new ArrayList<>();
    ArrayList<Event_Post> upcoming_events = new ArrayList<>();
    ArrayList<Event_Post> past_events = new ArrayList<>();

    HashMap<String,String[]> past;
    HashMap<String,String[]> upcoming;
    ArrayList<Integer> isRegistered;

    Date today;

    public FirebaseHelper(DatabaseReference db) {
        this.db = db;
        Timestamp timestamp = new Timestamp(System. currentTimeMillis());
        today = new Date(timestamp. getTime());
        //Log.i("today",today.toString());
    }
    public Boolean save(Post Post,String dbName,String ngo) {
        if(Post==null)
        {
            saved=false;
        }else
        {
            try
            {
                // Generate a reference to a new location and add some data using push()
                DatabaseReference pushedEventRef = db.child(dbName).push();
                // Get the unique ID generated by a push()
                String postId = pushedEventRef.getKey();

                db.child("ngo").child(ngo).child("events").push().setValue(postId);

                //db.child(dbName).push().setValue(Post);
                saved=true;
            }catch (DatabaseException e)
            {
                e.printStackTrace();
                saved=false;
            }
        }
        return saved;
    }
/*

    //IMPLEMENT FETCH DATA AND FILL ARRAYLIST
    private void fetchData(DataSnapshot dataSnapshot)
    {
        Event_Post post = dataSnapshot.getValue(Event_Post.class);
        String key = dataSnapshot.getKey();
        post.setKey(key);
        Posts.add(post);
    }

    private void fetchEvents(DataSnapshot dataSnapshot)
    {
        String event_id = dataSnapshot.getValue(String.class);
        Log.i("event_id",event_id);
        event_ids.add(event_id);
    }

    private void fetchEventsByDate(DataSnapshot dataSnapshot)
    {
        Event_Post post = dataSnapshot.getValue(Event_Post.class);
        String key = dataSnapshot.getKey();
        post.setKey(key);

        String event_date = post.getDate();
        SimpleDateFormat sdformat = new SimpleDateFormat("dd-MM-yyyy");
        Date d1 = new Date();
        try {
            d1 = sdformat.parse(event_date);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        Log.i("postdate",post.getDate()+"_"+d1.toString());

        if (isUpcomingEvent(d1)) {
            upcoming_events.add(post);
        }
        else {
            past_events.add(post);
        }
    }

    //RETRIEVE
    public ArrayList<Event_Post> retrieve()
    {
   */
   public ArrayList<Event_Post> retrieve() {
        db.child("event").addChildEventListener(new ChildEventListener() {
            @Override
            public void onChildAdded(DataSnapshot dataSnapshot, String s) {
                fetchData(dataSnapshot);
            }

            @Override
            public void onChildChanged(DataSnapshot dataSnapshot, String s) {
                fetchData(dataSnapshot);
            }

            @Override
            public void onChildRemoved(DataSnapshot dataSnapshot) {

            }

            @Override
            public void onChildMoved(DataSnapshot dataSnapshot, String s) {

            }

            @Override
            public void onCancelled(DatabaseError databaseError) {

            }
        });

        return Posts;
    }
    

    public void retrieveByDate(){
/*
    //IMPLEMENT FETCH DATA AND FILL ARRAYLIST
    private void fetchData(DataSnapshot dataSnapshot){
        Event_Post post = dataSnapshot.getValue(Event_Post.class);
        String key = dataSnapshot.getKey();
        post.setKey(key);
        Posts.add(post);
    }
    public ArrayList<String> retrieve_event_id_ngo(String ngo) {
        db.child("ngo").child(ngo).child("events").addChildEventListener(new ChildEventListener() {
            @Override
            public void onChildAdded(@NonNull DataSnapshot dataSnapshot, String s) {
                fetchEventId(dataSnapshot);
            }
            @Override
            public void onChildChanged(DataSnapshot dataSnapshot, String s) {
                fetchEventId(dataSnapshot);
            }
            @Override
            public void onChildRemoved(DataSnapshot dataSnapshot) {
            }
            @Override
            public void onChildMoved(DataSnapshot dataSnapshot, String s) {

            }
            @Override
            public void onCancelled(DatabaseError databaseError) {

            }
        });
        Log.i("event_ids",event_ids.toString());
        return event_ids;
    }
    private void fetch_Event_post_ngo(DataSnapshot dataSnapshot) {
        Event_Post post = dataSnapshot.getValue(Event_Post.class);
        String key = dataSnapshot.getKey();
        Log.i("post_key",post.getKey());
        post.setKey(key);
        if (event_ids.contains(key)){
            events_ngo.add(post);
        }
    }
    public ArrayList<Event_Post> retrieve_events_ngo(String contact) {
        //db.child("ngo").child(contact).child("events").addChildEventListener(new ChildEventListener() {
        db.child("events").addChildEventListener(new ChildEventListener() {
            @Override
            public void onChildAdded(DataSnapshot dataSnapshot, String s) {
                fetch_Event_post_ngo(dataSnapshot);
            }
            @Override
            public void onChildChanged(DataSnapshot dataSnapshot, String s) {
                fetch_Event_post_ngo(dataSnapshot);
            }
            @Override
            public void onChildRemoved(DataSnapshot dataSnapshot) {
            }

            @Override
            public void onChildMoved(DataSnapshot dataSnapshot, String s) {
            }

            @Override
            public void onCancelled(DatabaseError databaseError) {
            }
        });
        return events_ngo;
    }
    //Retrieve all events from database and separates it into two lists based on date
    public Boolean retrieveByDate() {
    */
        db.child("event").addChildEventListener(new ChildEventListener() {
            @Override
            public void onChildAdded(DataSnapshot dataSnapshot, String s) {
                fetchEventsByDate(dataSnapshot);
            }
            @Override
            public void onChildChanged(DataSnapshot dataSnapshot, String s) {
                fetchEventsByDate(dataSnapshot);
}

            @Override
            public void onChildRemoved(DataSnapshot dataSnapshot) {

            }

            @Override
            public void onChildMoved(DataSnapshot dataSnapshot, String s) {

            }

            @Override
            public void onCancelled(DatabaseError databaseError) {

            }
        });
    }

    public ArrayList<Event_Post> retrieve_completed_events(){
        retrieveByDate();
        return past_events;
    }

    public ArrayList<Event_Post> retrieve_upcoming_events(){
        retrieveByDate();
        return upcoming_events;
    }

    //TODO Modify this method to retrieve the events the user has attended
    public ArrayList<String> retrieve_registered_events(String user)
    {
        db.child("user").child(user).child("applied_events").addChildEventListener(new ChildEventListener() {
            @Override
            public void onChildAdded(DataSnapshot dataSnapshot, String s) {
                fetchEvents(dataSnapshot);
            }

            @Override
            public void onChildChanged(DataSnapshot dataSnapshot, String s) {
                fetchEvents(dataSnapshot);
            }

            @Override
            public void onChildRemoved(DataSnapshot dataSnapshot) {

            }

            @Override
            public void onChildMoved(DataSnapshot dataSnapshot, String s) {

            }

            @Override
            public void onCancelled(DatabaseError databaseError) {

            }
        });
        return event_ids;
    }

    public Boolean isUpcomingEvent(Date date){
        Boolean result = TRUE;
        if(today.compareTo(date) > 0) {
           result =  FALSE;
        }
        return result;
    }
            @Override
            public void onChildRemoved(DataSnapshot dataSnapshot) {
            }
            @Override
            public void onChildMoved(DataSnapshot dataSnapshot, String s) {
            }
            @Override
            public void onCancelled(DatabaseError databaseError) {
            }
        });
        return TRUE;
    }
    private void fetchEventsByDate(DataSnapshot dataSnapshot){
        Event_Post post = dataSnapshot.getValue(Event_Post.class);
        String key = dataSnapshot.getKey();
        post.setKey(key);

        String event_date = post.getDate();
        SimpleDateFormat sdformat = new SimpleDateFormat("dd-MM-yyyy");
        Date d1 = new Date();
        try {
            d1 = sdformat.parse(event_date);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        Log.i("postdate",post.getDate()+"_"+d1.toString());

        if (isUpcomingEvent(d1)) {
            this.upcoming_events.add(post);
            Log.i("upcoming",post.getKey());
            try{
                String[] categories = post.getCategories().split(",");
                this.upcoming.put(post.getKey(),categories);
                Log.i("upcoming",post.getCategories());

            }
            catch(Exception e){
                Log.i("exception",e.toString());
            }
        }
        else {
            this.past_events.add(post);
            Log.i("past",post.getKey());
            try{
                String[] categories = post.getCategories().split(",");
                this.past.put(post.getKey(),categories);
                Log.i("past",post.getCategories());
                if (events_registered.contains(post.getKey())){
                    this.isRegistered.add(1);
                }
                else{
                    this.isRegistered.add(1);
                }
            }
            catch(Exception e){
                Log.i("exception",e.toString());
            }
        }
    }
    public ArrayList<Event_Post> retrieve_completed_events(){
        return past_events;
    }
    public ArrayList<Event_Post> retrieve_upcoming_events(){
        return upcoming_events;
    }
    //Retrieve the events that user has registered
    public ArrayList<String> retrieve_registered_events(String user) {
        db.child("user").child(user).child("applied_events").addChildEventListener(new ChildEventListener() {
            @Override
            public void onChildAdded(DataSnapshot dataSnapshot, String s) {
                fetchEventId(dataSnapshot);
            }
            @Override
            public void onChildChanged(DataSnapshot dataSnapshot, String s) {
                fetchEventId(dataSnapshot);
            }
            @Override
            public void onChildRemoved(DataSnapshot dataSnapshot) {
            }
            @Override
            public void onChildMoved(DataSnapshot dataSnapshot, String s) {
            }
            @Override
            public void onCancelled(DatabaseError databaseError) {
            }
        });
        return events_registered;
    }
    // Retrieve event id
    private void fetchEventId(DataSnapshot dataSnapshot){
        String event_id = dataSnapshot.getValue(String.class);
        Log.i("registered_events",event_id);
        event_ids.add(event_id);
    }
    public Boolean isUpcomingEvent(Date date){
        Boolean result = TRUE;
        if(today.compareTo(date) > 0) {
            result =  FALSE;
        }
        return result;
    }
    public ArrayList<Event_Post> retrieve_recommended_events(String user){
        ArrayList<Event_Post> recommended_events = new ArrayList<>();
        events_registered = new ArrayList<>();
        this.upcoming_events = new ArrayList<>();
        this.past_events = new ArrayList<>();
        this.isRegistered = new ArrayList<>();
        this.past = new HashMap<>();
        this.upcoming = new HashMap<>();
        retrieve_registered_events(user);
        Boolean b = retrieveByDate();
        for (Integer i: isRegistered){
            Log.i("is_registered",Integer.toString(i));
        }
        String[] e = recommend(isRegistered,upcoming,past);
//        for(String i:e){
//            Log.i("recommended_event",i);
//        }
        //return recommended_events;
        Log.i("end","end");
        return upcoming_events;
        //return past_events;
    }
}